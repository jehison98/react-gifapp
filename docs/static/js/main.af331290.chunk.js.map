{"version":3,"sources":["Components/AddCategory/AddCategory.js","helpers/getGifs.js","Components/GifGridItem/GifGridItem.js","Components/GifGrid/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","React","useState","inputValue","setInputValue","id","onSubmit","e","preventDefault","trim","length","className","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"8PAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,IAAMC,SAAS,IAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,uBAAMC,GAAG,cAAcC,SATJ,SAACC,GACpBA,EAAEC,iBACEL,EAAWM,OAAOC,OAAS,IAC7BV,EAAcG,GACdC,EAAc,MAKhB,UACE,uBACEO,UAAU,eACVC,KAAK,OACLC,YAAY,kBACZC,MAAOX,EACPY,SAnBoB,SAACR,GACzBH,EAAcG,EAAES,OAAOF,UAoBrB,wBAAQH,UAAU,aAAaC,KAAK,SAApC,wB,8BC5BOK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLvB,GAAIuB,EAAIvB,GACRwB,MAAOD,EAAIC,MACXT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QAXjB,kBAedM,GAfc,4CAAH,sDCGPM,G,MAAc,SAAC,GAAuB,EAArB3B,GAAsB,IAAlBwB,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACvC,OACE,qBAAKT,UAAU,4CAAf,SACE,sBAAKA,UAAU,cAAf,UACE,qBAAKsB,IAAKb,EAAKc,IAAKL,IACpB,4BAAIA,WCHCM,G,MAAU,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SACxB,ECH0B,SAACA,GAC3B,MAA0BhB,mBAAS,CACjCuB,KAAM,GACNW,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAU,WACRtB,EAAQC,GAAUsB,MAAK,SAACC,GACtBH,EAAS,CAAEb,KAAMgB,EAAML,SAAS,SAEjC,CAAClB,IAEGmB,EDTmBK,CAAaxB,GAA/BO,EAAR,EAAQA,KAAMW,EAAd,EAAcA,QAEd,OAAOX,EAAKf,OAAS,EACnB,sBAAKC,UAAU,gBAAf,UAEI,oBAAIA,UAAU,oCAAd,SACGO,IAIJkB,GAAW,2CAEZ,qBAAKzB,UAAU,iBAAf,SACGc,EAAKE,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIvB,YAK5B,sDAAwBa,EAAxB,SErBSyB,EAAe,WAC1B,MAAkC1C,IAAMC,SAAS,aAAjD,mBAAOgB,EAAP,KAAiBlB,EAAjB,KAEA,OACE,gCACE,oBAAIK,GAAG,YAAP,4BACA,cAAC,EAAD,CAAaL,cAAeA,IAC5B,uBAEA,8BACE,cAAC,EAAD,CAASkB,SAAUA,U,YCR3B0B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.af331290.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./AddCategory.css\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 1) {\r\n      setCategories(inputValue);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form id=\"form-search\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"search-input\"\r\n        type=\"text\"\r\n        placeholder=\"Write something\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button className=\"search-btn\" type=\"submit\">\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = ` http://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=15&api_key=RKg3JP9a0jwQeQCCPlIxabnjJHZCcDMO`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./GifGridItem.css\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"img-box animate__animated animate__fadeIn\">\r\n      <div className=\"img-content\">\r\n        <img src={url} alt={title} />\r\n        <p>{title}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"../GifGridItem/GifGridItem\";\r\nimport \"./GifGrid.css\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data, loading } = useFetchGifs(category);\r\n\r\n  return data.length > 0 ? (\r\n    <div className=\"gif-container\">\r\n      {\r\n        <h3 className=\"animate__animated animate__fadeIn\">\r\n          {category}\r\n        </h3>\r\n      }\r\n\r\n      {loading && <p>Loading...</p>}\r\n\r\n      <div className=\"imgs-container\">\r\n        {data.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <p>Sorry I can't find \"{category}\"</p>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({ data: imgs, loading: false });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React from \"react\";\r\nimport { AddCategory } from \"./Components/AddCategory/AddCategory\";\r\nimport { GifGrid } from \"./Components/GifGrid/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [category, setCategories] = React.useState(\"One Punch\");\r\n\r\n  return (\r\n    <div>\r\n      <h2 id=\"gif-title\">Gif-Expert-App</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <div>\r\n        <GifGrid category={category} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport \"./index.css\";\nimport \"animate.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}